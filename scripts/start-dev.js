// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", (err) => {
  throw err;
});

// Ensure environment variables are read.
require("../config/env");

const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
const clearConsole = require("react-dev-utils/clearConsole");
const openBrowser = require("react-dev-utils/openBrowser");
const { choosePort, prepareProxy, prepareUrls } = require("react-dev-utils/WebpackDevServerUtils");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const paths = require("../config/paths");
const config = require("../config/webpack.config.dev");
const createDevServerConfig = require("../config/webpackDevServer.config");

const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

if (process.env.HOST) {
  console.log("Attempting to bind to HOST environment variable:", process.env.HOST);
  console.log("If this was unintentional, check that you haven't mistakenly set it in your shell.");
  console.log("Learn more here: http://bit.ly/2mwWSwH");
  console.log();
}

const start = async () => {
  try {
    // attempt to use the default port. if it is busy, offer to run on a different port
    const port = await choosePort(HOST, DEFAULT_PORT);
    if (port == null) {
      throw new Error("No port available");
    }
    const protocol = process.env.HTTPS === "true" ? "https" : "http";
    const urls = prepareUrls(protocol, HOST, port);
    // create a webpack compiler manually instead of using createCompiler
    // to avoid webpack 5 compatibility issues with react-dev-utils
    let compiler;
    try {
      compiler = webpack(config);
    } catch (err) {
      console.error("Error creating webpack compiler:", err);
      throw err;
    }
    // load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // serve webpack assets generated by the compiler over a web sever
    const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);
    let devServer;
    try {
      devServer = new WebpackDevServer(serverConfig, compiler);
    } catch (err) {
      console.error("Error creating WebpackDevServer:", err);
      throw err;
    }
    // launch WebpackDevServer
    await devServer.start();
    if (isInteractive) {
      clearConsole();
    }
    console.log("Starting the development server...\n");
    openBrowser(urls.localUrlForBrowser);
    // handle auto-exit
    ["SIGINT", "SIGTERM"].forEach((sig) => {
      process.on(sig, async () => {
        await devServer.stop();
        process.exit();
      });
    });
  } catch (err) {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  }
};

start();
